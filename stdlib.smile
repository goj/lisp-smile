define-module | smile std
use-syntax | ice-9 syncase
use-modules
  oop goops
  ice-9 receive
  srfi srfi-1 ; list stuff
  ice-9 optargs
  ice-9 q

define-macro | simple-syntax header . body
  let 
    \ name     | car header
      bindings | cdr header
      x        | gensym
    quasiquote
      define-syntax ,name
        lambda | ,x
          syntax-case ,x |
            \ _ ,@bindings
              syntax ,@body
export simple-syntax

define-macro | gensyms a . rest
  unless | list? a
    error "gensyms expects list of symbols as it's first argument"
  quasiquote
    let
      unquote
        %~ map i in a
          list i '(gensym)
      unquote-splicing rest
export gensyms

define-macro | with woot arg . thunk
  let || with-woot | symbol-append 'with- woot
    quasiquote
      ,with-woot arg
        lambda [] ,@thunk
export with

simple-syntax | %% fn (x y ...) (a b ...) c1 c2 ...
  fn [lambda (x y ...) c1 c2 ...] a b ...
export %%

define-macro | % fn bindings . rest
  receive [collections body] | split-at rest | length bindings
    quasiquote
      %% ,fn ,bindings ,collections ,@body
export %

define | make-eqv y
  lambda | x
    eqv? x y
export make-eqv

define-macro | %~ fn . args
  receive [bindings rest] | break! [make-eqv 'in] args
    quasiquote
      % ,fn ,bindings ,@[cdr rest]
export %~

define | compliment fn
  lambda x
    not | apply fn x
export compliment

define-public ~ compliment

simple-syntax | with-cc cc a b ...
  call-with-current-continuation
    lambda [cc] a b ...
export with-cc

define-macro | for . x
  append '(%~ for-each) x
export for

define-method | for-each fn [s1 <promise>]
  stream-for-each fn s1

define-method | for-each fn [s1 <promise>] [s2 <promise>]
  stream-for-each fn s1 s2

define-method | for-each fn [s1 <promise>] [s2 <promise>] [s3 <promise>]
  stream-for-each fn s1 s2 s3

define-method | for-each fn [s1 <hashtable>]
  hash-for-each [lambda [x y] | fn | cons x y] s1

define-macro | calc-for . x
  append '(%~ map) x
export calc-for

simple-syntax | do-times count c1 c2 ...
  let req || n count
    when | > n 0
      begin c1 c2 ...
      req | 1- n
export do-times

simple-syntax | when cnd c1 c2 ...
  if cnd
    begin c1 c2 ...
    . *unspecified*
export when

simple-syntax | unless cnd c1 c2 ...
  if cnd
    . *unspecified*
    begin c1 c2 ...
export unless

simple-syntax | bind-vars lst (a b ...) c d ...
  receive (a b ...) (apply values lst) c d ...
export bind-vars
  

define-macro | lambda-bind-vars vars . body
  gensyms | tmp
    quasiquote
      lambda | ,tmp
        bind-vars ,tmp ,vars ,@body
export lambda-bind-vars
  
define | positional-only args
  let || tmp | make-q
    let req || args args
      cond
        \ null? args
          q->list tmp
        \ keyword? [car args]
          req | cl-cddr args
        else
          enq! tmp | car args
          req | cdr args
export positional-only
  
define* | print #:key [port | current-output-port] [func display] [before ""] [delim " "] [after "\n"] #:rest args
  display before port
  let || args | positional-only args
    unless | null? args
      let req || args args
        func [car args] port
        let || tail | cdr args
          unless | null? tail
            display delim port
            req tail
  display after port
export print

define-macro | set-slots! instance . pairs
  unless | symbol? instance
    error "set-slots! requires symbol as it's first argument"
  unless | list? pairs
    error "set-slots! expects list of lists as it's second argument"
  cons 'begin
    append
      %~ map pair in pairs
        if | $ ,[pair? pair] and ,[pair? | cdr pair]
          let
            \ symbol | car pair
              value  | cadr pair
            if | symbol? symbol
              quasiquote
                slot-set! ,instance ',symbol ,value
              error "set-slots! syntax error"
          error "set-slots! expects list of lists as it's second argument"
      . `(,instance)
export set-slots!


define-macro | make-instance-and-setup class . initial-vals
  unless | symbol? class
    error "make-instance-and-setup requires class name as it's first argument"
  unless | list? initial-vals
    error "make-instance-and-setup expects list of lists as it's second argument"
  gensyms | result
    quasiquote
      let || ,result | make-instance ,class
        set-slots! ,result ,@initial-vals
export make-instance-and-setup


define-public rest cdr

define-public q->list car
define-public q-top q-front
define-public | list->q lst
  let || q | cons lst #f
    sync-q! q
    . q

define-public | cl-car x
  if | null? x
    . '()
    car x

define-public | cl-cdr x
  if | null? x
    . '()
    cdr x

define-macro | cl-c___r ___ x
  let* || lst | map string->symbol | map string | string->list | symbol->string ___
    let calc || lst lst
      if | null? lst
        . x
        let || fun | symbol-append 'cl-c [car lst] 'r
          list fun | calc | cdr lst

define-macro | define-cl-c___rs a b
  let || result | make-q
    enq! result 'begin
    let req
      \ level 0
        mid-symbol '#{}#
      when | >= level a
        enq! result
          quasiquote
            define-public | ,[symbol-append 'cl-c mid-symbol 'r] __x__
              cl-c___r ,mid-symbol __x__
      when | < level b
        req [1+ level] [symbol-append mid-symbol 'a]
        req [1+ level] [symbol-append mid-symbol 'd]
    q->list result
define-cl-c___rs 2 5

define | range a b
  make-stream
    lambda | state
      if | <= state b
        cons state | 1+ state
        . '()
    . a
export range

define | list-range a b
  stream->list | range a b
export list-range

define-macro | define-nth-fn fn
  let || fun-name | symbol-append 'nth- fn
    gensyms | lst i
      quasiquote
        define-public | ,fun-name ,lst ,i
          if | zero? ,i
            ,fn ,lst
            ,fun-name [cdr ,lst] [1- ,i]
          
define-nth-fn car
define-nth-fn cdr
define-nth-fn car+cdr

simple-syntax | m->fn m
  lambda x
    primitive-eval | cons m x
export m->fn
    
define | none . args
  not | apply any args
export none

define-public any?   any
define-public every? every
define-public none?  none


