load "smile.scm"

define *parser* | setup-parser [readline-port] #t
set-readline-prompt! ">>> " "... "
define r5rs | interaction-environment
define *verbose* #f
readline-enable 'history-file


with-cc break
  let grande-lupe |
    catch #t
      lambda |
        reset-lexer *parser*
        set-buffered-input-continuation?! [readline-port] #f
        let || parsed | parse *parser*
          ;pretty-print parsed #:per-line-prefix "::: "
          if | eqv? EOF parsed
            break #f
            let || result | eval parsed r5rs
              unless | eq? *unspecified* result
                pretty-print result
      lambda | key . args
        print "ERROR: " key args
        backtrace
    grande-lupe
print "bye!"

#|
if *verbose*
  begin
    define | true-read-token
      read-token *parser*
    define tmp-token-queue | make-q
    define | read-token
      if | q-empty? tmp-token-queue
        . EOF
        deq! tmp-token-queue
    define | unread-token tkn
      q-push! tmp-token-queue tkn
    let verbose-grande-lupe ()
      set-buffered-input-continuation?! [readline-port] #f
      let || tokens | make-q
        let reader ()
          let || tmp | true-read-token
            unless | eqv? EOF tmp
              enq! tokens tmp
              reader
        let || lst | q->list tokens
          unless | null? lst
            display " lexed: "
            output-delimited write " " lst
            newline
            reset-lexer *parser*
            for-each unread-token | reverse lst
            let || parsed | parse *parser*
              pretty-print parsed #:per-line-prefix "parsed: "
              let || result | eval parsed r5rs
                unless | eq? *unspecified* result
                  pretty-print result #:per-line-prefix "evaled: "
            ; end of parser test
      reset-lexer *parser*
      verbose-grande-lupe
      |#
  ; not verbose
