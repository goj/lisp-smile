define | lexer-error lexer . args
  define | str arg
    format #f "~a" arg
  raise
    list 'lexer-error
      string-join [map str args] " "
      cons
        port-line   | lexer-port lexer
        port-column | lexer-port lexer

; lexer setup:

define-class <lexer> |
  port         #:accessor lexer-port         #:init-keyword #:port
  interactive? #:accessor lexer-interactive? #:init-keyword #:interactive?
  indentation  #:accessor lexer-indentation  #:init-value '(0)
  empty-line?  #:accessor lexer-empty-line?  #:init-value #t
  braces       #:accessor lexer-braces       #:init-value '()
  token-buffer #:accessor lexer-token-buffer #:init-thunk make-q

define | copy-lexer parser
  let \\ port        | lexer-port parser
         interactive | lexer-interactive? parser
       make <lexer> #:port port #:interactive? interactive
       
define-macro | reset-lexer lexer
  quasiquote
    set! ,lexer | copy-lexer ,lexer

define | setup-lexer port interactive
  make <lexer> #:port port #:interactive? interactive

define | read-token lexer
  let || port | lexer-port lexer
    define | on-empty-line?
      lexer-empty-line? lexer
    define | set-on-empty-line! x
      set! [lexer-empty-line? lexer] x

    define | indentation
      lexer-indentation lexer
    define | set-indentation! new-one
      set! [lexer-indentation lexer] new-one
    define | add-to-indentation x
      set! [lexer-indentation lexer] | cons x | lexer-indentation lexer

    define | token-buffer
      lexer-token-buffer lexer

    define ignored
        char-set #\space #\tab

    define separators
      char-set-union
        apply char-set | map first *brace-tokens*
        char-set #\space #\newline #\tab #\"

    define | separator? chr
      char-set-contains? separators chr

    define | read-until-predicate pred result
      let || chr | read-char port
        if | pred chr
          begin
            unread-char chr port
            reverse-list->string result
          read-until-predicate pred | cons chr result

    define | string->thing str
      cond
        [ assoc str *token-strings* ] => second
        else
            read | open-input-string str

    define | open-parenthesis type
      set! [lexer-braces lexer] | cons type [lexer-braces lexer]
      
    define | close-parenthesis type
      cond
        \ null? | lexer-braces lexer
          lexer-error lexer "unexcepted closing brace"
        \ eq? type | car | lexer-braces lexer
          set! [lexer-braces lexer] | cdr | lexer-braces lexer
        else
           lexer-error lexer "incompatible braces"

    define | on-flat?
      or
        not | on-empty-line?
        null? | lexer-braces lexer

    define | read-slash
      let || chr | read-char port
        cond
          \ char=? chr #\newline
            eat-whitespace
          \ char-set-contains? ignored chr
            read-slash
          else
             unread-char chr port
             start-new-line
    
    define | read-string
      unread-char #\" port
      read port

    define | read-real-token chr
      set-on-empty-line! #f
      cond
        \ char=? chr #\#
          unread-char #\# port
          read port
        \ char=? chr #\"
          read-string
        \ char=? chr #\\
          read-slash
        \ char=? chr #\'
          . SINGLE_QUOTE
        \ char=? chr #\,
          let || tmp | read-char port
            if | char=? tmp #\@
             . COMMA_AT
             begin
               unread-char tmp port
               . COMMA
        [ assoc chr *brace-tokens* ] =>
          lambda-bind | chr token type open
            if open
              open-parenthesis type
              close-parenthesis type
            . token
        else
          string->thing
            read-until-predicate separator? | list chr

    define | do-at-eof
      unless | on-empty-line?
        enq! [token-buffer] ENDLINE
      do-times [1- | length | indentation]
        enq! [token-buffer] DEDENT
      enq! [token-buffer] EOF
      set-indentation! '(1)
      deq! [token-buffer]

    define | start-new-line
      if | on-empty-line?
        eat-whitespace
        begin
          let position |
            let || chr | read-char port
              cond
                \ eof-object? chr
                  do-at-eof
                \ and
                    char=? chr #\newline
                    = 0 | port-column port
                    lexer-interactive? lexer
                  do-at-eof
                \ char-whitespace? chr
                  position
                else
                  set-on-empty-line! #t
                  unread-char chr port
                  let || col | port-column port
                    cond
                      [ > col | first | indentation ]
                        add-to-indentation col
                        enq! [token-buffer] INDENT
                      [ member col | indentation ] =>
                        lambda | whats-left
                          let \\ prev-len | length | indentation
                                 curr-len | length whats-left
                               set-indentation! whats-left
                               do \\ countdown
                                      - prev-len curr-len
                                      1- countdown
                                   | = countdown 0
                                   enq! [token-buffer] DEDENT
                      else
                        lexer-error lexer "bad indentation" col [indentation]
                  . ENDLINE

    define | read-part
      let || chr '_
        let pre-loop |
          set! chr | read-char port
          when | char-whitespace? chr
            pre-loop
        let loop || result | list chr
          set! chr | read-char port
          if | char-whitespace? chr
            reverse-list->string result
            loop | cons chr result

    define | eat-whitespace
      define | ignore-comment
        do || tmp #\_ | read-char port
           \ char=? tmp #\newline
             unread-char tmp port
             eat-whitespace
           . 'do-nothing
      let || chr | read-char port
        if | eof-object? chr
          do-at-eof
          case chr
            [ #\space #\tab ]
              eat-whitespace
            [ #\newline ]
              if | on-flat?
                start-new-line
                eat-whitespace
            [ #\; ]
              ignore-comment
            [ #\# ]
              let || chr2 | read-char port
                case chr2
                  [ #\! ]
                    ignore-comment
                  [ #\| ]
                    let read-comment || depth 1
                      let || current | read-part
                        cond
                          \ string=? current "#|"
                            read-comment | 1+ depth
                          \ string=? current "|#"
                            if | = depth 1
                              eat-whitespace
                              read-comment | 1- depth
                          else
                             read-comment depth
                  else
                    unread-char chr2 port
                    read-real-token chr
            else
              read-real-token chr

    ; procedure body
    if | q-empty? [token-buffer]
      eat-whitespace
      deq! [token-buffer]

define | unread-token lexer tkn
  q-push! [lexer-token-buffer lexer] tkn


