define-class <token> |
  type

define-method | initialize [tkn <token>] args
  bind args | val
    slot-set! tkn 'type  val

define-method | write [tkn <token>] [port <port>]
  display
    format #f "TKN_~a" | slot-ref tkn 'type
    . port

define-macro | register-token . lst
  cons 'begin
    calc-for tkn in lst
      var str | symbol->string tkn
        quasiquote
          define ,tkn
            make <token> ,str

;; special token --- token which is not a datum
define | special-token? x
  is-a? x <token>
define | datum? x
  not | special-token? x

register-token INDENT DEDENT ENDLINE
register-token DOT BAR BAR_BAR BAR_BAR_BAR
register-token SINGLE_QUOTE COMMA COMMA_AT
register-token OPEN_PAREN CLOSE_PAREN
register-token OPEN_BRACKET CLOSE_BRACKET

register-token EOF WRONG ; quasi-tokens

define | parser-error . args
  define | str arg
    format #f "~a" arg
  raise
    list 'parser-error
      string-join [map str args] " "
      cons
        port-line   *port*
        port-column *port*
      read-token
      read-line

define *brace-tokens*
  quasiquote
    ; symbol token          shape  open
    \ #\(    ,OPEN_PAREN    ROUND  #t
      #\)    ,CLOSE_PAREN   ROUND  #f
      #\[    ,OPEN_BRACKET  SQUARE #t
      #\]    ,CLOSE_BRACKET SQUARE #f

define *token-strings*
  quasiquote
    ; symbol   token
    \ "."      ,DOT
      "|"      ,BAR
      "||"     ,BAR_BAR
      "|||"    ,BAR_BAR_BAR
      "~EOF~"  ,EOF

define *quotation-tokens*
  list
    list SINGLE_QUOTE 'quote
    list COMMA        'unquote
    list COMMA_AT     'unquote-splicing

define | parse
  define | true-procedure-body
    var part | parse-or-allow parse-line EOF
      if | wrong? part
        parser-error "error when parsing line"
        . part

  define | wrong? x
    eqv? WRONG x

  define | eat-token tkn
    var eaten | read-token
      unless | eqv? tkn eaten
        parser-error "ecepting" tkn "but" eaten "encountered"

  define | eaten-token? tkn
    var eaten | read-token
      if | eqv? tkn eaten
        . #t
        begin
          unread-token eaten
          . #f

  define | eat-and-return food return
    eat-token food
    . return
    
  define | kleene-star proc
    var q | make-q
      loop read-them
        var tmp | proc
          unless | wrong? tmp
            enq! q tmp
            read-them
      q->list q

  define | kleene-plus proc
    var lst | kleene-star proc
      if [ null? lst ] WRONG lst

  define | parse-or-allow parser . allowed
    var tmp | read-token
      if | member tmp allowed
        . tmp
        begin
          unread-token tmp
          parser

  define | force-parsing parser
    var tmp | parser
      when | wrong? tmp
        parser-error [procedure-name parser] "failed"
      . tmp
    
  define | parse-line
    var tkn | read-token
      cond
        [ eqv? DOT tkn ]
          eat-and-return ENDLINE | parse-element
        [ eqv? ENDLINE tkn ]
          eat-token INDENT
          eat-and-return DEDENT | parse-list-of-lines
        else
          unread-token tkn
          var flat | parse-list-inside
            if | wrong? flat
              . WRONG
              begin
                eat-token ENDLINE
                if | eaten-token? INDENT
                  eat-and-return DEDENT | append flat [parse-list-of-lines]
                  . flat

  define | parse-element
    var tkn | read-token
      cond
        [ eqv? OPEN_PAREN tkn ]
          var inside | parse-list-inside
            eat-token CLOSE_PAREN
            if | wrong? inside
              . '()
              . inside
        [ eqv? OPEN_BRACKET tkn ]
          var inside | parse-list-inside
            eat-token CLOSE_BRACKET
            if | wrong? inside
              . '()
              . inside
        [ datum? tkn ] tkn
        [ assoc tkn *quotation-tokens* ] =>
          lambda | info
            list
              second info
              force-parsing parse-element
        else
          unread-token tkn
          . WRONG

  define | parse-flat-el
    parse-or-allow parse-element BAR BAR_BAR BAR_BAR_BAR

  define | parse-list-inside
    var flat-el+ | kleene-plus parse-flat-el
      if | wrong? flat-el+
        . WRONG
        begin
          when | eaten-token? DOT
            set! flat-el+ | append flat-el+ | force-parsing parse-element
          repair-flat flat-el+

  define | repair-flat lst
    var lst | cons 'sentinel lst
      let repair || elem lst
        if | not | pair? | cl-cdr elem
          cdr lst
          var tmp | second elem
            cond
              \ eqv? BAR tmp
                set-cdr! elem | list | cddr elem
                repair | cadr elem
              \ eqv? BAR_BAR tmp
                set-cdr! elem | list | list | cddr elem
                repair | caadr elem
              \ eqv? BAR_BAR_BAR tmp
                set-cdr! elem | list | list | list | cddr elem
                repair | caaadr elem
              else
                repair | cdr elem

  define | parse-flat
    var flat-el+ 
      kleene-plus parse-flat-el
      if | wrong? flat-el+
        . WRONG
        repair-flat flat-el+

  define | parse-list-of-lines
    kleene-plus parse-line

  true-procedure-body
