define-class <token> |
  type

define-method | initialize [tkn <token>] args
  bind-vars args | val
    slot-set! tkn 'type  val

define-method | write [tkn <token>] [port <port>]
  display
    format #f "TKN_~a" | slot-ref tkn 'type
    . port

define-macro | register-token . lst
  cons 'begin
    calc-for tkn in lst
      let || str | symbol->string tkn
        quasiquote
          define ,tkn
            make <token> ,str

;; special token --- token which is not a datum
define | special-token? x
  is-a? x <token>
define | datum? x
  not | special-token? x

register-token INDENT DEDENT ENDLINE
register-token DOT BAR BAR_BAR BAR_BAR_BAR
register-token AMP_DOT AMP AMP_AMP AMP_AMP_AMP
register-token SINGLE_QUOTE COMMA COMMA_AT QUASI_QUOTE
register-token OPEN_PAREN CLOSE_PAREN
register-token OPEN_BRACKET CLOSE_BRACKET

register-token EOF WRONG ; quasi-tokens

define | parser-error parser . args
  define | str arg
    format #f "~a" arg
  let || port | slot-ref parser 'port
    raise
      list 'parser-error
        string-join [map str args] " "
        cons
          port-line   port
          port-column port
        read-line port

define *brace-tokens*
  quasiquote
    ; symbol token          shape  open
    \ #\(    ,OPEN_PAREN    ROUND  #t
      #\)    ,CLOSE_PAREN   ROUND  #f
      #\[    ,OPEN_BRACKET  SQUARE #t
      #\]    ,CLOSE_BRACKET SQUARE #f

define *token-strings*
  quasiquote
    ; symbol   token
    \ "."      ,DOT
      "&."     ,AMP_DOT
      "&"      ,AMP
      "&&"     ,AMP_AMP
      "&&&"    ,AMP_AMP_AMP
      "|"      ,BAR
      "||"     ,BAR_BAR
      "|||"    ,BAR_BAR_BAR
      "~EOF~"  ,EOF

define *quotation-tokens*
  list
    list SINGLE_QUOTE 'quote
    list QUASI_QUOTE  'quasiquote
    list COMMA        'unquote
    list COMMA_AT     'unquote-splicing

define | get-lexer parser
  . parser

define | parse parser
  let || lexer | get-lexer parser
    define | true-procedure-body
      let || part | parse-or-allow parse-line EOF
        if | wrong? part
          parser-error parser "error when parsing line"
          . part

    define | wrong? x
      eqv? WRONG x

    define | eat-token tkn
      let || eaten | read-token lexer
        unless | eqv? tkn eaten
          parser-error parser "excepting" tkn "but" eaten "encountered"

    define | eaten-token? tkn
      let || eaten | read-token lexer
        if | eqv? tkn eaten
          . #t
          begin
            unread-token lexer eaten
            . #f

    define | eat-and-return food return
      eat-token food
      . return
      
    define | kleene-star proc
      let || q | make-q
        let read-them ()
          let || tmp_ | proc
            unless | wrong? tmp_
              enq! q tmp_
              read-them
        q->list q

    define | kleene-plus proc
      let || lst | kleene-star proc
        if [ null? lst ] WRONG lst

    define | parse-or-allow parser-fn . allowed
      let || tmp__ | read-token lexer
        if | member tmp__ allowed
          . tmp__
          begin
            unread-token lexer tmp__
            parser-fn

    define | force-parsing proc
      let || tmp | proc
        when | wrong? tmp
          parser-error parser [procedure-name proc] "failed"
        . tmp
      
    define | parse-line
      let || tkn | read-token lexer
        cond
          [ eqv? DOT tkn ]
            eat-and-return ENDLINE | parse-element
          [ eqv? ENDLINE tkn ]
            eat-token INDENT
            eat-and-return DEDENT | parse-list-of-lines
          else
            unread-token lexer tkn
            let || flat | parse-list-inside
              if | wrong? flat
                . WRONG
                begin
                  eat-token ENDLINE
                  if | eaten-token? INDENT
                    eat-and-return DEDENT | append flat [parse-list-of-lines]
                    . flat

    define | parse-element
      let || tkn | read-token lexer
        cond
          [ eqv? OPEN_PAREN tkn ]
            let || inside | parse-list-inside
              eat-token CLOSE_PAREN
              if | wrong? inside
                . '()
                . inside
          [ eqv? OPEN_BRACKET tkn ]
            let || inside | parse-list-inside
              eat-token CLOSE_BRACKET
              if | wrong? inside
                . '()
                . inside
          [ eqv? AMP_DOT tkn ]
            cons
              force-parsing parse-element
              force-parsing parse-element
          [ eqv? AMP tkn ]
            list | force-parsing parse-element
          [ eqv? AMP_AMP tkn ]
            list
              force-parsing parse-element
              force-parsing parse-element
          [ eqv? AMP_AMP_AMP tkn ]
            list
              force-parsing parse-element
              force-parsing parse-element
              force-parsing parse-element
          [ datum? tkn ] tkn
          [ assoc tkn *quotation-tokens* ] =>
            lambda | info
              list
                second info
                force-parsing parse-element
          else
            unread-token lexer tkn
            . WRONG

    define | parse-flat-el
      parse-or-allow parse-element BAR BAR_BAR BAR_BAR_BAR

    define | parse-list-inside
      let || flat-el+ | kleene-plus parse-flat-el
        if | wrong? flat-el+
          . WRONG
          begin
            when | eaten-token? DOT
              set! flat-el+ | append flat-el+ | force-parsing parse-element
            repair-flat flat-el+

    define | repair-flat lst
      let || lst | cons 'sentinel lst
        let repair || elem lst
          if | not | pair? | cl-cdr elem
            cdr lst
            let || tmp | second elem
              cond
                \ eqv? BAR tmp
                  set-cdr! elem | list | cddr elem
                  repair | cadr elem
                \ eqv? BAR_BAR tmp
                  set-cdr! elem | list | list | cddr elem
                  repair | caadr elem
                \ eqv? BAR_BAR_BAR tmp
                  set-cdr! elem | list | list | list | cddr elem
                  repair | caaadr elem
                else
                  repair | cdr elem

    define | parse-flat
      let || flat-el+ | kleene-plus parse-flat-el
        if | wrong? flat-el+
          . WRONG
          repair-flat flat-el+

    define | parse-list-of-lines
      kleene-plus parse-line

    true-procedure-body
export parse

define setup-parser setup-lexer
export setup-parser

define-module | smile load_smile
define | load-smile file
  with-input-from-file file
    lambda |
      let*
        \ parse-smile      | @ [smile internals] parse
          __EOF__          | @@ [smile internals] EOF
          __setup-parser__ | @ [smile internals] setup-parser
          *parser* | __setup-parser__ [current-input-port] #f
        let grande-lupe |
          let || parsed | parse-smile *parser*
            unless | eqv? parsed __EOF__
              primitive-eval parsed
              grande-lupe
export load-smile
