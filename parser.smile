#!/usr/bin/env smile
display "Please wait"
load "require.scm"

use-modules
  oop goops
  srfi srfi-1 ; list library
  ice-9 pretty-print
  ice-9 rdelim
  ice-9 readline
  ice-9 buffered-input
  ice-9 streams
  ice-9 q
  ice-9 format

display #\.
require "stdlib.smile"
display #\.

define-class <token> |
  type

define-method | initialize [tkn <token>] args
  bind args | val
    slot-set! tkn 'type  val

define-method | write [tkn <token>] [port <port>]
  display
    format #f "TKN_~a" | slot-ref tkn 'type
    . port

define-macro | register-token . lst
  cons 'begin
    calc-for tkn in lst
      var str | symbol->string tkn
        quasiquote
          define ,tkn
            make <token> ,str

register-token INDENT DEDENT ENDLINE
register-token DOT BAR
register-token SINGLE_QUOTE COMMA COMMA_AT
register-token OPEN_PAREN CLOSE_PAREN
register-token OPEN_BRACKET CLOSE_BRACKET

register-token EOF WRONG ; quasi-tokens

define *brace-tokens*
  quasiquote
    :| ;symbol token      shape  open
       #\( ,OPEN_PAREN    ROUND  #t
       #\) ,CLOSE_PAREN   ROUND  #f
       #\[ ,OPEN_BRACKET  SQUARE #t
       #\] ,CLOSE_BRACKET SQUARE #f

define *token-strings*
  quasiquote
    :| ;symbol token
       "."  ,DOT
       "|"  ,BAR
       "|>" ,INDENT
       "<|" ,DEDENT
       "||" ,ENDLINE

; lexer setup:
define *port*         *unspecified*
define *indentation*  *unspecified*
define *empty-line*   *unspecified*
define *interactive*  *unspecified*
define *braces*       *unspecified*
define *token-buffer* *unspecified*

define | setup-lexer port interactive
  set! *port*         port
  set! *interactive*  interactive
  set! *indentation*  '(1)
  set! *empty-line*    #t
  set! *interactive*   #t
  set! *braces*       '()
  set! *token-buffer* | make-q

define | read-token
    define ignored
        char-set #\space #\tab

    define separators
      char-set-union
        apply char-set | map first *brace-tokens*
        char-set #\space #\newline #\tab #\"

    define | separator? chr
      char-set-contains? separators chr

    define | read-until-predicate pred result
      var chr | read-char *port*
        if | pred chr
          begin
            unread-char chr *port*
            reverse-list->string result
          read-until-predicate pred | cons chr result

    define | read-hash
      var chr | read-char *port*
        case chr
          [ #\! ]
            read-line *port*
            read-token
          [ #\| ]
            let read-comment
              :| depth 1
              var current | read-delimited " \n\t" *port*
                cond
                  :| string=? current "#|"
                     read-comment | 1+ depth
                  :| string=? current "|#"
                     if | = depth 1
                       read-token
                       read-comment | 1- depth
                  else
                     read-comment depth
          else
            unread-char chr *port*
            unread-char #\# *port*
            read *port*

    define | string->thing str
      cond
        [ assoc str *token-strings* ] => second
        else
            read | open-input-string str

    define | open-parenthesis type
      set! *braces* | cons type *braces*
      
    define | close-parenthesis type
      cond
        :| null? *braces*
           error "unexcepted closing brace"
        :| eq? type | car *braces*
           set! *braces* | cdr *braces*
        else
           error "incompatible braces"

    define | on-flat?
      or
        not *empty-line*
        null? *braces*

    define | read-slash
      var chr | read-char *port*
        cond
          :| char-set-contains? ignored chr
             read-slash
          :| char=? chr #\newline
             eat-whitespace
          else
             unread-char chr *port*
             start-new-line
    
    define | read-string
      unread-char #\" *port*
      read *port*

    define | read-real-token chr
      set! *empty-line* #f
      cond
        :| char=? chr #\#
           read-hash
        :| char=? chr #\"
           read-string
        :| char=? chr #\\
           read-slash
        :| char=? chr #\'
           . SINGLE_QUOTE
        :| char=? chr #\,
           var tmp | read-char *port*
             if | char=? tmp #\@
              . COMMA_AT
              begin
                unread-char tmp *port*
                . COMMA
        [ assoc chr *brace-tokens* ] =>
          lambda | spec
            bind spec | chr token type open
              if open
                open-parenthesis type
                close-parenthesis type
              . token
        else
          string->thing
            read-until-predicate separator? | list chr

    define | do-at-eof
      for i in | cdr *indentation*
        enq! *token-buffer* DEDENT
      set! *indentation* '(1)
      enq! *token-buffer* EOF
      deq! *token-buffer*

    define | start-new-line
      if *empty-line*
        eat-whitespace
        begin
          set! *empty-line* #t
          loop position
            var chr | read-char *port*
              cond
                :| eof-object? chr
                   do-at-eof
                :| char-set-contains? ignored chr
                   position
                :| and
                     char=? chr #\newline
                     = 0 | port-column *port*
                     . *interactive*
                   do-at-eof
                else
                  var col | port-column *port*
                    unread-char chr *port*
                    cond
                      [ > col | first *indentation* ]
                        set! *indentation* | cons col *indentation*
                        . INDENT
                      [ = col | first *indentation* ] ENDLINE
                      [ member col *indentation* ] =>
                        lambda | whats-left
                          let :| prev-len | length *indentation*
                                 curr-len | length whats-left
                              set! *indentation* whats-left
                              do :| countdown
                                      - prev-len curr-len 1
                                      1- countdown
                                 :| = countdown 0
                                    . DEDENT
                                 enq! *token-buffer* DEDENT
                      else
                        error "bad indentation"

    define | eat-whitespace
      var chr | read-char *port*
        if | eof-object? chr
          do-at-eof
          case chr
            [ #\space #\tab ]
              eat-whitespace
            [ #\newline ]
              if | on-flat?
                start-new-line
                eat-whitespace
            else
               read-real-token chr

    ; procedure body
    if | q-empty? *token-buffer*
      eat-whitespace
      deq! *token-buffer*


print ". system ready!"
set-readline-prompt! ">>> " "... "
setup-lexer [readline-port] #t
loop grande-lupe
  set-buffered-input-continuation?! *port* #f
  var tokens | make-q
    loop reader
      var tmp | read-token
        unless | eqv? EOF tmp
          enq! tokens tmp
          reader
    var lst | q->list tokens
      unless | null? lst
        for tkn in lst
          write tkn
          display " "
        newline
        grande-lupe
        
print "bye!"
